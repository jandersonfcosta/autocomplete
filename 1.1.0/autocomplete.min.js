/*
	Autocomplete 1.1.0
	Criado por Janderson Costa em 20/05/2016.

	Descrição:
		Implementa no campo especificado uma lista de opções que varia conforme o termo digitado pelo usuário.
		Percorrendo os itens acima ou abaixo na lista através das setas do teclado, o campo recebe o valor do item atual selecionado.

	Dependências:
		jquery 1.4.2+

	Pripriedades:
		args.field: input ou textarea
		args.delay: 350 (padrão) - tempo para execução após digitação
		args.remote: recebe uma função do padrão function(term, callback) {}
		args.items: array de itens que serão listados no dropdown - ["text", "text", ..] ou [{ text: text, value: value }, ..]
		args.dropdownHeight: 12 (padrão) - nº linas do dropdown o que afeta também sua altura
		args.allowAnyValue: false ou true (padrão) - permite qualquer valor digitado
		args.icon: false (padrão) ou true - exibe o ícone a direita do campo
		args.top: 5 (padrão) - afastamento superior do campo

	Uso:
		// html
		<input id="field1" type="text" />
		
		// js
		autocomplete({
			field: $("#field1"),
			items: ["banana", "melão", "uva", "pera", "laranja", "maçã"],
			icon: false,
			select: function(result) {
				// result: { value: value, text: text }

				console.log(result);
			}
		});

		autocomplete({
			field: $("#field1"),
			delay: 500,
			allowAnyValue: false,
			remote: getFruits,
			select: function(result) {
				console.log(result);
			}
		});

		function getFruits(term, callback) {
			//..

			callback(items);
		}
*/


// objeto compartilhado com autocomplete()
var AUTOCOMPLETE = {};

(function() {

	//var resourceUrl = "/_dev/lib/autocomplete/1.1.0/";
	var resourceUrl = "";

	// CSS
	var href = resourceUrl + "css/autocomplete.min.css";
	$("head").append('<link rel="stylesheet" href="' + href + '">');

	// COMPONENTES
	// ícone
	AUTOCOMPLETE.iconImage = {
		search: resourceUrl + "img/search.png",
		loader: resourceUrl + "img/loading.gif"
	};
	AUTOCOMPLETE.icon = $('<img class="ac-field-icon">')
	.attr({
		src: AUTOCOMPLETE.iconImage.search,
		border: 0
	});

	// dropdown
	AUTOCOMPLETE.dropdown = $('<div class="ac-dropdown">');

	// item - template
	AUTOCOMPLETE.itemTemplate = '<p>{text}</p>'; // ex.: '<p><b>Texto</b>: {text} - <b>Valor</b>: {value}</p>'

	// EXECUÇÃO
	AUTOCOMPLETE.addEvent = addEvent;
	AUTOCOMPLETE.removeEvent = removeEvent;
	AUTOCOMPLETE.stopPropagation = stopPropagation;
	
	// configura os componentes
	setComponents();

	// insere os componentes na página
	$("body").append(AUTOCOMPLETE.dropdown, AUTOCOMPLETE.icon);

	// FUNÇÕES
	function setComponents(dropdown) {
		// dropdown
		// evento - selectstart - cancela seleção
		AUTOCOMPLETE.dropdown.bind("selectstart", function() {
			return false;
		});

		// evento - mousedown - impede que o dropdown feche ao clicar no mesmo devido ao evento mousedown implementado no html
		AUTOCOMPLETE.dropdown[0].onmousedown = stopPropagation;
	}

	function addEvent(element, event, f) {
		// adiciona um novo evento no elemento preservando os atuais

		if (element.addEventListener) // for all major browsers, except IE 8 and earlier
			element.addEventListener(event, f);
		else if (element.attachEvent) // for IE 8 and earlier versions
			element.attachEvent("on" + event, f);
	}

	function removeEvent(element, event, f) {
		// remove o evento do elemento preservando os outros atuais

		if (element.removeEventListener)
			element.removeEventListener(event, f, false);
		else if (element.detachEvent)
			element.detachEvent("on" + event, f);
	}

	function stopPropagation() {
		// impede que o disparo do evento de um elemento seja propagado para o elemento pai

		window.event.cancelBubble = true;
		window.event.returnValue = false;
	}
})();

function autocomplete(args) {
	/*
		*** NOTAS ***
		O tempo de resposta entre a digitação do termo pesquisado e a exibição dos itens no menu será tão grande quanto
		a quantidade de itens retornados.
		Verificou-se que o maior gargalo está na função setItems(), responsável por configurar cada item do menu de forma iterativa.
		Conseguiu-se melhorar consideravelmente a performance refatorando o algoritmo da função setItems().

		Verificou-se em testes que a performance do recurso é melhor nos seguintes navegadores:
			1° - Google Chrome
			2° - IE 11 (modo de compatibilidade 5 e 7) ~ 3x mais lento

		Nos testes, verificou-se que a performance cai drasticamente na utilizaçãp do navegador IE 11 (modo de compatibilidade 11)
		fazendo com que o tempo de exibição do menu se eleve bastante e com travamento intermediário.
	*/

	// VARIÁVEIS GLOBAIS
	var
	html = document.body.parentNode,
	dropdown = AUTOCOMPLETE.dropdown,
	itemTemplate = AUTOCOMPLETE.itemTemplate,
	icon = AUTOCOMPLETE.icon,
	field = args.field;

	// PROPRIEDADES
	args.dropdown = dropdown;
	args.itemTemplate = itemTemplate;
	args.items = args.items || [];
	args.remote = args.remote || false;
	args.dropdownHeight = args.dropdownHeight || 12;
	args.delay = args.delay || 350;
	args.allowAnyValue = args.allowAnyValue !== undefined && args.allowAnyValue === false ? false : true;
	args.icon = args.icon !== undefined && args.icon === true ? true : false;
	args.top = args.top || 6;

	// CONFIGURAÇÃO
	setField();

	// EVENTOS
	// html - mousedown - sai do dropdown
	AUTOCOMPLETE.addEvent(html, "mousedown", cancel);

	// FUNÇÕES
	function show(items) {
		// chamado por field.keyup()

		if (items.length > 0) {
			// dropdown - configura e exibe
			setItems(items);
			showDropdown();
		} else
			dropdown.hide();

		loader(false);
	}

	function setField() {
		// ícone
		if (args.icon) {
			icon = icon.clone();

			field.before(icon.css("display", "inline-block"));
			field.css("padding-left", 20);

			// evento - dragstart - cancela arrastar
			icon.bind("dragstart", function() {
				return false;
			});
		}

		// evento - focus
		field.focus(function() {
			// guarda o valor original
			$(this).attr("originalvalue", $(this).val());
		});

		// evento - blur
		field.blur(function() {
			if (!args.allowAnyValue)
				cancel();
		});

		// evento - keydown - up/down/enter/tab/esc
		field.keydown(function(event) {
			var item = dropdown.find(".ac-dropdown-item-selected");

			// seta para baixo
			if (event.keyCode === 40) {
				// para a rotina se o dropdown estiver oculto
				if (!dropdownIsOpen())
					return false;

				item = item.next();

				if (item.length > 0) {

					// destaca o item
					focusItem(item);

					// valor do campo
					$(this).val(item.text());

					// scroll
					dropdown.scrollTop(item[0].offsetHeight * item.index());
				}
			}

			// seta para cima
			if (event.keyCode === 38) {
				// para a rotina se o dropdown estiver oculto
				if (!dropdownIsOpen())
					return false;

				item = item.prev();

				if (item.length > 0) {

					// destaca o item
					focusItem(item);

					// valor do campo
					$(this).val(item.text());

					// scroll
					dropdown.scrollTop(item[0].offsetHeight * item.index());
				}
			}

			// enter
			if (event.keyCode === 13 && dropdownIsOpen()) {
				// seleciona o item destacado
				selectItem(item);
				return false;
			}

			// tab
			if (event.keyCode === 9)
				cancel();

			// esc
			if (event.keyCode === 27)
				cancel();
		});

		// evento - paste
		field.bind("paste", function() {
			// impede ctrl-v
			if (args.allowAnyValue === false)
				return false;
		});

		// evento - drop
		field.bind("drop", function() {
			// impede arrastar valor para dentro do campo
			if (args.allowAnyValue === false)
				return false;
		});

		// evento - keyup - pesquisa
		field.keyup(function(event) {
			var term = $.trim($(this).val());

			// diferente das setas, enter e esc
			if ((event.keyCode < 37 || event.keyCode > 40) && event.keyCode != 13 && event.keyCode != 27) {
				// aborta a thread
				if (typeof(autocomplete_thread) !== "undefined")
					clearTimeout(autocomplete_thread);

				loader(true);

				// inicia a thread
				autocomplete_thread = setTimeout(function() {
					if (term.length >= 2) {
						// preloader
						loader(true);

						setTimeout(function() {
							if (args.remote)
								args.remote(term, function(items) {
									show(items);// items: [{ text: text, value: value }]
								});
							else
								show(getItemsByTerm(term));
						}, 100);
					}
					else
						dropdown.hide();
				}, args.delay);

				loader(false);
			}
		});
	}

	function getItemsByTerm(term) {
		var
		_items = args.items,
		items = [];

		for (var i in _items) {
			var value = _items[i].text || _items[i];

			if (value.toLowerCase().match(term.toLowerCase()))
				items.push(_items[i]);
		}

		return items;
	}

	function setItems(items) {
		// ver NOTAS

		// itens
		if (items.length > 0) {
			var _items = "";

			// limpa
			dropdown.html("");

			// carrega
			for (var i in items) {
				var
				text = items[i].text || items[i],
				value = items[i].value || text,
				content = "";

				// conteúdo
				content = itemTemplate
				.replace(/{value}/g, value)
				.replace(/{text}/g, text);

				_items += '<div class="ac-dropdown-item" value="' + value + '" text="' + text + '">' + content + '</div>';
			}

			dropdown.html(_items);

			// eventos
			dropdown.find(".ac-dropdown-item").each(function() {
				// click
				$(this).click(function() {
					selectItem($(this));
				});

				// mouseover
				$(this).mouseover(function() {
					if ($(this).attr("class").match(/selected/i) === null)
						$(this).addClass("ac-dropdown-item-hover");
				});

				//  mouseout
				$(this).mouseout(function() {
					$(this).removeClass("ac-dropdown-item-hover");
				});
			});
		}
	}

	function showDropdown() {
		// insere o dropdown após o campo
		var tag = field.attr("tagName");
		field.parent().prepend(dropdown);
		dropdown.css("margin-top", field.height() + args.top + (tag.match(/textarea/i) ? 1 : 0));

		// exibe
		dropdown
		.css({ display: "inline-block" })
		.scrollTop(0);

		// altura
		dropdown.height(dropdown.find(":first")[0].offsetHeight * args.dropdownHeight);

		// largura
		dropdown.width("");

		if (dropdown.width() < field.width()) {
			if (tag.match(/input/i))
				dropdown.width(field.width() + (args.icon ? 23 : 4));
			else
				dropdown.width(field.width() + (args.icon ? 23 : 8));
		}
		else
			dropdown.width(dropdown.width() + 20);

		// destaca o primeiro item
		focusItem(dropdown.find(":first").eq(0));
	}

	function dropdownIsOpen() {
		return (dropdown.css("display") !== "none");
	}

	function closeDropdown(item) {
		// oculta
		dropdown.hide();
		loader(false);

		// callback
		if (item && args.select) {
			args.select({
				text: item.attr("text"),
				value: item.attr("value"),
				args: args
			});
		}
	}

	function cancel() {
		var element = window.event.srcElement;

		// para a rotina se o usuário clicar dentro do campo
		if (window.event.type === "mousedown" && (element.tagName === "INPUT" || element.tagName === "TEXTAREA"))
			return false;

		if (window.event.type !== "blur") {
			// restaura o valor original
			if (!args.allowAnyValue)
				restoreValue();

			// fecha o dropdown
			closeDropdown();
		}
	}

	function selectItem(item) {
		// seleciona o item, atualiza o campo e fecha o dropdown

		if (dropdownIsOpen()) {
			// atualiza o valor do campo
			field.val(item.text());

			// atualiza o atributo originalvalue do campo
			field.attr("originalvalue", item.text());

			// fecha
			closeDropdown(item);
		}
	}

	function focusItem(item) {
		// destaca o item

		if (args.selectedItem)
			args.selectedItem.removeClass("ac-dropdown-item-selected");

		item.addClass("ac-dropdown-item-selected");
		args.selectedItem = item;
	}

	function loader(state) {
		// exibe/oculta o icone animado

		if (state === true) {
			field.css("color", "#999");

			if (args.icon)
				icon.attr("src", AUTOCOMPLETE.iconImage.loader);
			else {
				field.css("cursor", "wait");
				dropdown.css("cursor", "wait");
				$("body").css("cursor", "wait");
			}
		}
		else {
			field.css("color", "");

			if (args.icon) {
				icon.attr("src", AUTOCOMPLETE.iconImage.search);
			}
			else {
				field.css("cursor", "");
				dropdown.css("cursor", "");
				$("body").css("cursor", "");
			}
		}
	}

	function restoreValue() {
		// restaura o valor original do campo se diferente de vazio

		if ($.trim(field.val()).length > 0)
			field.val(field.attr("originalvalue"));
	}

	return args;
}